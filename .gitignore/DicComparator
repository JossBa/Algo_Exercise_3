package de.htw.app;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;

public class DicComparator {
	
	private static ArrayList<String> gaps;
	
	
	DicComparator() {
		gaps = new ArrayList<String>();
	}
	
	public void sortDic (Dictionary dic){
		Collections.sort(dic.getDic());
	}
	
	
	
	//Find the gap between the original and the modified *.txt
	public ArrayList<String> findGaps(Dictionary orig, Dictionary mod){
		String word;		
		Iterator<String> it = orig.getDic().iterator();
		while(it.hasNext()){
			word = it.next();
			if(Collections.binarySearch(mod.getDic(), word)<0){
				gaps.add(word);
			}
		}
		return gaps;
	}
	/*
	 * //if(!mod.getDic().contains(word)) --> first approach 
	 *  contains-Methode dauert zu lange
	 *  deshalb mittels binarySearch nach lücken suchen
	 *  anschließend einfügen ins modifizierte wörterbuch und noch einmal sortieren
	 * 
	 * */
	
	// Fill the gap in the modified *.txt and document the diff's
	public void fillGaps(Dictionary orig, Dictionary mod){
		ArrayList <String> temp = findGaps(orig,mod);
		for(String x: temp)
		mod.addWord(x);
		sortDic(mod);
		gaps.clear();
	}
	
	//find diffs in both so that they are matching
	public void findAllDiffs(Dictionary orig, Dictionary mod){
		
		ArrayList <String> temp = new ArrayList<String>();
		temp.addAll(findGaps(mod,orig));
		temp.addAll(findGaps(orig,mod));
	
	}
	
	
	public void printOutGaps(){
		for(String x: gaps){
			System.out.println(x);
		}
	}
}
